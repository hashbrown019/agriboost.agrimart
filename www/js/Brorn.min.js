// 
// THIS SCRIPT IS CREATED BY CHRISTIAN BRON
// USE ONLY WITH PYTHON FLASK OR DJANGO
//
// v 0.13.1

let _ = undefined

var CONNECTION = {}
var REQUESTS = {}
var CONNECTION_COUNTER = 0
var ERR_EXCEPTIONS = false
var ON_GOING_REQUEST = []

let _last_ls_random_result = ''

const _JS_NAME = 'brorn.JS' 
const _JS_VERSION_ = 'v 0.13.1_alpha' 
const _VERSION_ = _JS_VERSION_

const POST = "POST"
const GET = "GET"
const OPTION = "OPTION"

function $CLASS(class_name){return document.getElementsByClassName(class_name)}
function $TAG(tag){return document.getElementsByTagName(tag)}
function $randint(size){return Math.floor(Math.random() * size);}
function $ID(id_name){return document.getElementById(id_name)}
function goto(url){window.location.replace(url);}
function $$$(q){return document.querySelector(q)}
function $json(str){return JSON.parse(str)}
function $table(...p){console.table(...p)}
function $print(...p){console.log(...p)}
function println(...p){console.log(...p)}
function $date(){return new Date()}
function $datetime(){return new Date().toLocaleString()}

function $show_view(ids,classn){
	panel_views = c(classn)
	for (var i = 0; i < panel_views.length; i++) {
		if(ids!=panel_views[i].id){panel_views[i].style.display="none"}
		else{panel_views[i].style.display="block"}
	}
 }

function $http(p){return new http(p)}
function $send(p){return new http(p)}
function http(p){
	let RESULT_REQ = undefined
	if(window.navigator.onLine){}
	else{alert("You are not connected to internet")}
	CONNECTION_COUNTER += 1
	const params = populate(p)
	ACTIVE_CONNECTION = (CONNECTION_COUNTER)
	REQUESTS[ACTIVE_CONNECTION] =  params;
	CONNECTION[ACTIVE_CONNECTION] = new XMLHttpRequest();
	this.xhttp = CONNECTION[ACTIVE_CONNECTION];
	this.xhttp.open(REQUESTS[ACTIVE_CONNECTION].method,REQUESTS[ACTIVE_CONNECTION].action,REQUESTS[ACTIVE_CONNECTION].a_sync);
	for (var key in REQUESTS[ACTIVE_CONNECTION].headers){this.xhttp.setRequestHeader(key, REQUESTS[ACTIVE_CONNECTION].headers[key])}
	this.xhttp.onreadystatechange = function(){RESULT_REQ = this};
	this.xhttp.addEventListener("loadend", loadEnd);
	function loadEnd(e) {
		if(parseInt(e.target.status)!=200){
			REQUESTS[ACTIVE_CONNECTION].err(e)

		}
		if(RESULT_REQ.readyState == 4) {
			if(RESULT_REQ.status == 200){
				if(REQUESTS[ACTIVE_CONNECTION].response=="all"){REQUESTS[ACTIVE_CONNECTION].func(RESULT_REQ)}
				else if(REQUESTS[ACTIVE_CONNECTION].response=="header"){REQUESTS[ACTIVE_CONNECTION].func(RESULT_REQ.getAllResponseHeaders())}
				else if(REQUESTS[ACTIVE_CONNECTION].response=="text"){REQUESTS[ACTIVE_CONNECTION].func(RESULT_REQ.responseText)}
				else{REQUESTS[ACTIVE_CONNECTION].func(RESULT_REQ.responseText)}
			}
		}
		else if(RESULT_REQ.status == 500	|| RESULT_REQ.status == 404	|| RESULT_REQ.status == 401){
			REQUESTS[ACTIVE_CONNECTION].func(RESULT_REQ.getAllResponseHeaders)
			ERROR = {"ERROR_REQUEST":CONNECTION[ACTIVE_CONNECTION]}
			return this.xhttp
		}
		else{
			REQUESTS[ACTIVE_CONNECTION].on_request(this)
		}
	}
	this.xhttp.send(params.data);
}

http.prototype.next = async function(func) {this.xhttp.addEventListener('loadend', function(e) {$print("* Next :"+e.type);return func});}
http.prototype.with = async function(func) {this.xhttp.addEventListener('loadstart', function(e) {$print("* with"+e.type);return func});}

String.prototype.replaceAt = function(index, replacement) {
	return this.substr(0, index) + replacement + this.substr(index + replacement.length);
}

function $TRIGGER(params){
	if(params.id==undefined){params.action='#'}
	if(params.event==undefined){params.event="click"}
	if(params.func==undefined){params.func= function(){alert(params)}}
	$(params.id).addEventListener(params.event, params.func);
}
function populate(params){
	if(params.action==undefined){params.action='/'}
	if(params.data==undefined){params.data=$DATA({'_DATA':'NULL'})}
	if(params.func==undefined){params.func=function(res){$print(res)}}
	if(params.err==undefined){params.err=function(res){$print(res)}}
	if(params.on_request==undefined){params.on_request=function(ret){}}
	if(params.method==undefined){params.method='POST'}
	if(params.a_sync==undefined){params.a_sync=true}
	if(params.response==undefined){params.type="responseText"}
	if(params.headers==undefined){params.headers={}}
	return params
}
function num_comma(x){return Money(x)}
function money(x){return Money(x)}
function Money(x) {
	if(x==null){return x}
	else{return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");}
}

function ls_random(ls){
	while(true){
		res = ls[Math.floor(Math.random() * ls.length)]
		if(res==_last_ls_random_result){continue}
		else{_last_ls_random_result = res;return res}
	}
}

function $DATA(d){var data_form = new FormData();for(var key in d){data_form.append(key, d[key])};return data_form}
FormData.prototype.appendFile = function(file_tag) {for (var i = 0; i < file_tag.files.length; i++) {this.append(file_tag.id+i,file_tag.files[i])};return this}

function hashCode(str, seed = 0) {
	let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
	for (let i = 0, ch; i < str.length; i++) {ch = str.charCodeAt(i);h1 = Math.imul(h1 ^ ch, 2654435761);h2 = Math.imul(h2 ^ ch, 1597334677);}
	h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);
	h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);
	return 4294967296 * (2097151 & h2) + (h1>>>0);
};

String.prototype.toCamelCase = function() {
	return this.replace(/^([A-Z])|\s(\w)/g, function(match, p1, p2, offset) {
		if (p2) return p2.toUpperCase();
		return p1.toLowerCase();        
	});
};

function timeout(func,sec){window.setTimeout(func,sec)}

var url_args =  url_args_()
function url_args_ (){
	var url = new URL(document.location.toString());let obj = {};
	var c = url.searchParams.forEach((value, key) => {obj[key] = value;});
	return(obj);
}


var w;

function JSWorker() {
	if(typeof(Worker) !== "undefined") {
		if(typeof(w) == "undefined") {w = new Worker("demo_workers.js");}
		w.onmessage = function(event) {return event;};
	} else {alert("Sorry, your browser does not support Web Workers...");}
}

function stopWorker() { 
	w.terminate();
	w = undefined;
}


function gen_code(length) {
	for (var s=''; s.length < length; s += 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.charAt(Math.random()*62|0));
	return s;
}